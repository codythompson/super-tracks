uses Plasmacore

class GameObjMover [aspect]
  METHODS
    method getVel(obj:GameObj, graph:TrackGraph)->XY [aspect]
    method moveObj(obj:GameObj, graph:TrackGraph) [aspect]
endClass

class LinearObjMover : GameObjMover
  METHODS
    method getVel(obj:GameObj, graph:TrackGraph)->XY
      return getVel(obj, graph, obj.speed)

    method getVel(obj:GameObj, graph:TrackGraph, speed:Real64)->XY
      if (Math.abs(speed) < 0.00001 or obj.derailed)
        return XY(0)
      endIf
      local tileInfo = graph.calcLayout(obj.containingTile.i, obj.containingTile.j)
      local exitIJ = tileInfo.exitIJ(obj.currentEntrance)
      return XY(speed, (exitIJ - obj.ij).radians)

    method moveObj(obj:GameObj, graph:TrackGraph)
      if (Math.abs(obj.speed) < 0.00001 or obj.derailed)
        return
      endIf

      local tileInfo = graph.calcLayout(obj.containingTile.i, obj.containingTile.j)
      local exitIJ = tileInfo.exitIJ(obj.currentEntrance)
      local distanceToExit = (exitIJ - obj.ij).magnitude
      if (distanceToExit < obj.speed)
        obj.ij = exitIJ
        obj.currentEntrance = TrackConnection.entranceDirection(obj.containingTile, IJ(exitIJ.x, exitIJ.y))
        obj.containingTile = IJ(exitIJ.x, exitIJ.y)
        if (obj.currentEntrance == TrackConnection.NONE)
          obj.derailed = true
          Events.emit(DerailEvent(obj, tileInfo))
        else
          # move by the "leftover" distance towards the new tile exit
          obj.ij += getVel(obj, graph, obj.speed - distanceToExit)
        endIf
      else
        obj.ij += getVel(obj, graph)
      endIf
endClass

