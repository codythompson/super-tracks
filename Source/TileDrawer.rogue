uses Plasmacore

class TileDrawer( graph:TrackGraph ) [aspect]
  # GLOBAL PROPERTIES
  #   colors = Color[][
  #     Color.BLACK,
  #     Color.BLUE,
  #     Color.BROWN,
  #     Color.CYAN,
  #     Color.DARK_GRAY,
  #     Color.DARK_GREEN,
  #     Color.GRAY,
  #     Color.GREEN,
  #     Color.LIGHT_GRAY,
  #     Color.LIME,
  #     Color.MAGENTA,
  #     Color.ORANGE,
  #     Color.PURPLE,
  #     Color.RED,
  #     Color.TRANSPARENT,
  #     Color.YELLOW,
  #     Color.WHITE
  #   ]

  METHODS
    method drawFunc->Function( index:Int32, ij:XY, bounds:Box ) [aspect]
endClass

class StupidTileDrawer : TileDrawer
  PROPERTIES
    trackColor=Color.DARK_GRAY:Color
    landColor=Color.DARK_GRAY:Color
    errorColor=Color.DARK_GREEN:Color
  METHODS
    method drawFunc->Function( index:Int32, ij:XY, bounds:Box )
      return this=>draw

    method colorAt( i:Int32, j:Int32 )->Color
      if (i >= graph.tilesWide or j >= graph.tilesHigh) return errorColor
      local layout = graph.calcLayout(i,j).layout
      return select(layout){TrackConnection.NONE:landColor || trackColor}

    method draw( index:Int32, ij:XY, bounds:Box )
      bounds.fill( colorAt(ij.x, ij.y) )
endClass

class BetterTileDrawer( graph:TrackGraph, tileImage:TileImage ) : StupidTileDrawer
  METHODS
    method draw( index:Int32, ij:XY, bounds:Box )
      # draw a background color
      prior.draw(index, ij, bounds)

      #try to draw a tiled image
      local tileInfo:TrackTileInfo
      contingent
        necessary (graph.contains(ij.x, ij.y))
        tileInfo = graph.calcLayout(ij.x, ij.y)
        necessary (tileImage.tileSet.contains(tileInfo))
        satisfied
          tileImage.draw(tileInfo, bounds)
      endContingent
endClass