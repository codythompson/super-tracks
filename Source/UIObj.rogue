uses Plasmacore

class UIObj
  PROPERTIES
    parent:UIObj
    children = UIObj[]

    left = 0:Real64
    top = 0:Real64
    width = 1:Real64
    height = 1:Real64

    color = Color(0x00ffffff)
    image:Image
    # TODO text, font, fontColor, borders

    # TODO is valid flag used for removing from Mains update/draw list

    boundsDirty = true
    cachedBounds:Box

    listeners = Table<<Int32,(Function(UIObjPointerEvent))[]>>()
    pressEvent:UIObjPointerEvent

  METHODS
    method set_left(@left)
      boundsDirty = true
    method set_top(@top)
      boundsDirty = true
    method set_width(@width)
      boundsDirty = true
    method set_height(@height)
      boundsDirty = true

    method position->XY
      return bounds.position
    method set_position( position:XY )
      local parentBounds = parent.bounds
      left = position.x/parentBounds.width
      top = position.y/parentBounds.height
    method setPositionClamped( position:XY )
      set_position(position)
      left = left.clamped(0.0, 1.0-width)
      top = top.clamped(0.0, 1.0-height)

    method add( child:UIObj )
      child.parent = this
      children.add(child)

    method remove( child:UIObj )
      child.parent = null
      children.remove(child)

    method update
      (forEach in children).update

    method bounds->Box
      if (boundsDirty)
        local parentBounds:Box
        if (parent)
          parentBounds = parent.bounds
        else
          parentBounds = Display.bounds
        endIf

        local x = parentBounds.x + (left * parentBounds.width)
        local y = parentBounds.y + (top * parentBounds.height)
        local w = width * parentBounds.width
        local h = height * parentBounds.height
        cachedBounds = Box(x, y, w, h)
        boundsDirty = false
      endIf

      return cachedBounds

    method drawImage()
      if (not image?) return

      local bounds = bounds
      local ar = bounds.width / bounds.height
      local imageAR = image.width / image.height
      local scale = select{
        imageAR >= ar: XY(bounds.width / image.width) ||
        XY(bounds.height / image.height)...
      }
      scale *= image.scale

      local origScale = image.scale
      local origAnchor = image.anchor
      image.scale = scale
      image.anchor = Anchor.CENTER
      image.draw(XY(bounds.x + bounds.width/2, bounds.y + bounds.height/2))
      image.scale = origScale
      image.anchor = origAnchor

    method draw
      bounds.fill(color)
      drawImage()
      (forEach in children).draw

    #{
      tap/touch/pointer stuff
    }#
    method on( type:Int32, listener:Function(UIObjPointerEvent) )
      if (not listeners.contains(type)) listeners[type] = (Function(UIObjPointerEvent))[]()
      listeners[type].add(listener)

    method fire( type:Int32, e:UIObjPointerEvent )
      if (not listeners.contains(type)) return
      forEach(listener in listeners[type])
        listener(e)
      endForEach

    method contains( position:XY )->Logical
      return bounds.contains(position)

    method getTarget( position:XY )->UIObj
      if (not contains(position)) return null
      forEach(child in children)
        if (child.contains(position)) return child.getTarget(position)
      endForEach
      return this

    method clearPreviousEvent
      if (pressEvent?)
        pressEvent = null
        forEach(child in children)
          child.clearPreviousEvent()
        endForEach
      endIf

    method handlePressEvent( e:UIObjPointerEvent )
      if (not bounds.contains(e.position))
        clearPreviousEvent()
        return
      endIf
      pressEvent = e
      fire(PointerEvent.PRESS, e)
      forEach(child in children)
        child.handlePressEvent(e)
      endForEach

    method handleMoveEvent( e:UIObjPointerEvent )
      if (not pressEvent) return
      fire(PointerEvent.MOVE, e)
      forEach(child in children)
        child.handleMoveEvent(e)
      endForEach

    method handleReleaseEvent( e:UIObjPointerEvent )
      if (not pressEvent) return
      fire(PointerEvent.RELEASE, e)
      forEach(child in children)
        child.handleReleaseEvent(e)
      endForEach
      clearPreviousEvent()

endClass

class UIObjPointerEvent : PointerEvent
  PROPERTIES
    pressTarget: UIObj
    target:UIObj
  METHODS
    method init( original:PointerEvent, @target, @pressTarget )
      type = original.type
      position = original.position
      delta = original.delta
      index = original.index
endClass
